// generated with ast extension for cup
// version 0.8
// 22/5/2020 23:11:35


package rs.ac.bg.etf.pp1.ast;

public interface Visitor { 

    public void visit(Unmatched Unmatched);
    public void visit(MethodDecl MethodDecl);
    public void visit(Mulop Mulop);
    public void visit(Matched Matched);
    public void visit(Relop Relop);
    public void visit(Assignop Assignop);
    public void visit(ListProg ListProg);
    public void visit(FormalParamDecl FormalParamDecl);
    public void visit(VarDecListP VarDecListP);
    public void visit(AbstractListP AbstractListP);
    public void visit(StatementList StatementList);
    public void visit(MethodDecList MethodDecList);
    public void visit(ConstDeclP ConstDeclP);
    public void visit(DesignatorStatements DesignatorStatements);
    public void visit(Addop Addop);
    public void visit(Factor Factor);
    public void visit(CondTerm CondTerm);
    public void visit(AbstractMethodDecl AbstractMethodDecl);
    public void visit(AddopLeft AddopLeft);
    public void visit(Designator Designator);
    public void visit(Term Term);
    public void visit(Condition Condition);
    public void visit(MethodDeclType MethodDeclType);
    public void visit(ConstDeclList ConstDeclList);
    public void visit(ActParsList ActParsList);
    public void visit(AddopRight AddopRight);
    public void visit(VarDecList VarDecList);
    public void visit(Conditions Conditions);
    public void visit(FormalParamList FormalParamList);
    public void visit(Expr Expr);
    public void visit(ActPars ActPars);
    public void visit(AbstractClassDecl AbstractClassDecl);
    public void visit(DesignatorStatement DesignatorStatement);
    public void visit(Statement Statement);
    public void visit(MulopLeft MulopLeft);
    public void visit(ClassDecl ClassDecl);
    public void visit(ConstDecl ConstDecl);
    public void visit(CondFact CondFact);
    public void visit(AbstractList AbstractList);
    public void visit(Lists Lists);
    public void visit(ListVarDecl ListVarDecl);
    public void visit(MulopRight MulopRight);
    public void visit(FormPars FormPars);
    public void visit(AddopSUB AddopSUB);
    public void visit(AddopADD AddopADD);
    public void visit(AddopMIN AddopMIN);
    public void visit(AddopPLUS AddopPLUS);
    public void visit(MulopPER MulopPER);
    public void visit(MulopDIV MulopDIV);
    public void visit(MulopMUL MulopMUL);
    public void visit(MulopRightPMOD MulopRightPMOD);
    public void visit(MulopRightDIV MulopRightDIV);
    public void visit(MulopRightMUL MulopRightMUL);
    public void visit(MulopRightRight MulopRightRight);
    public void visit(MulopLeftMLeft MulopLeftMLeft);
    public void visit(AddopRightARight AddopRightARight);
    public void visit(AddopLeftPLeft AddopLeftPLeft);
    public void visit(RelopLE RelopLE);
    public void visit(RelopL RelopL);
    public void visit(RelopGRE RelopGRE);
    public void visit(RelopGR RelopGR);
    public void visit(RelopNE RelopNE);
    public void visit(RelopE RelopE);
    public void visit(AssignopMRt AssignopMRt);
    public void visit(AssignopARi AssignopARi);
    public void visit(AssignopEQ AssignopEQ);
    public void visit(DesignE DesignE);
    public void visit(DesignP DesignP);
    public void visit(DesignatorIdent DesignatorIdent);
    public void visit(FactorExpr FactorExpr);
    public void visit(FactorNewExpr FactorNewExpr);
    public void visit(FactorNew FactorNew);
    public void visit(FactorBoolConst FactorBoolConst);
    public void visit(FactorCharConst FactorCharConst);
    public void visit(FactorNumConst FactorNumConst);
    public void visit(FuncCall FuncCall);
    public void visit(DesignatorActPars DesignatorActPars);
    public void visit(DesignatorFactor DesignatorFactor);
    public void visit(TermF TermF);
    public void visit(TermMulop TermMulop);
    public void visit(TermM TermM);
    public void visit(Exprs Exprs);
    public void visit(ExprAddop ExprAddop);
    public void visit(ExprA ExprA);
    public void visit(ExprMA ExprMA);
    public void visit(CondFactR CondFactR);
    public void visit(CondFacts CondFacts);
    public void visit(SinglCondTerm SinglCondTerm);
    public void visit(CondTerms CondTerms);
    public void visit(SinglCond SinglCond);
    public void visit(Cond Cond);
    public void visit(SinglActParamsList SinglActParamsList);
    public void visit(ActParamsList ActParamsList);
    public void visit(NoActParams NoActParams);
    public void visit(ActParams ActParams);
    public void visit(DesignatorStatementsD DesignatorStatementsD);
    public void visit(DesignatorStatementsI DesignatorStatementsI);
    public void visit(DesignatorStatementsL DesignatorStatementsL);
    public void visit(DesignatorStatementsA DesignatorStatementsA);
    public void visit(ErrorDesignator ErrorDesignator);
    public void visit(DesignatorMulop DesignatorMulop);
    public void visit(DesignatorAddop DesignatorAddop);
    public void visit(DesignatorStatementss DesignatorStatementss);
    public void visit(NoConditions NoConditions);
    public void visit(Conditionn Conditionn);
    public void visit(NoDesignatorStatements NoDesignatorStatements);
    public void visit(DesignatorStatementt DesignatorStatementt);
    public void visit(StatementSB StatementSB);
    public void visit(PrintStmtC PrintStmtC);
    public void visit(PrintStmt PrintStmt);
    public void visit(Reads Reads);
    public void visit(ReturnNoExpr ReturnNoExpr);
    public void visit(ReturnExpr ReturnExpr);
    public void visit(Continues Continues);
    public void visit(Breaks Breaks);
    public void visit(FORS FORS);
    public void visit(MatchedStatement MatchedStatement);
    public void visit(Assignment Assignment);
    public void visit(UnmatchedIfElse UnmatchedIfElse);
    public void visit(UnmatchedIf UnmatchedIf);
    public void visit(UnmatchedStmt UnmatchedStmt);
    public void visit(MatchedStmt MatchedStmt);
    public void visit(NoStmt NoStmt);
    public void visit(Statements Statements);
    public void visit(Type Type);
    public void visit(ErrorFormalParam ErrorFormalParam);
    public void visit(FormalParamDeclB FormalParamDeclB);
    public void visit(FormalParamDeclsB FormalParamDeclsB);
    public void visit(SingleFormalParamDecl SingleFormalParamDecl);
    public void visit(FormalParamDecls FormalParamDecls);
    public void visit(NoFormParam NoFormParam);
    public void visit(FormParams FormParams);
    public void visit(AbsMethDeclV AbsMethDeclV);
    public void visit(AbsMethDeclTF AbsMethDeclTF);
    public void visit(MethodDeclVoid MethodDeclVoid);
    public void visit(MethodDeclTypeT MethodDeclTypeT);
    public void visit(MethodDeclTF MethodDeclTF);
    public void visit(NoMethodDecl NoMethodDecl);
    public void visit(MethodDeclarations MethodDeclarations);
    public void visit(AbstractListAbstract AbstractListAbstract);
    public void visit(AbstractListMethod AbstractListMethod);
    public void visit(NoAbstractListMethod NoAbstractListMethod);
    public void visit(AbstractListMethods AbstractListMethods);
    public void visit(AbstractClassDeclsA AbstractClassDeclsA);
    public void visit(AbstractClassDeclEM AbstractClassDeclEM);
    public void visit(AbstractClassDecls AbstractClassDecls);
    public void visit(AbstractClassDeclE AbstractClassDeclE);
    public void visit(ClassDeclsM ClassDeclsM);
    public void visit(ClassDeclsEM ClassDeclsEM);
    public void visit(ClassDecls ClassDecls);
    public void visit(ClassDeclsE ClassDeclsE);
    public void visit(ErrorVarDecs ErrorVarDecs);
    public void visit(BrVarDecListI BrVarDecListI);
    public void visit(VarDecListI VarDecListI);
    public void visit(SinglVarDecl SinglVarDecl);
    public void visit(VarDeclarations VarDeclarations);
    public void visit(VarDecl VarDecl);
    public void visit(NoListVarDecls NoListVarDecls);
    public void visit(ListVarDecls ListVarDecls);
    public void visit(ConstDeclPBool ConstDeclPBool);
    public void visit(ConstDeclPChar ConstDeclPChar);
    public void visit(ConstDeclPNums ConstDeclPNums);
    public void visit(SignalCDecls SignalCDecls);
    public void visit(CDecls CDecls);
    public void visit(ConstDecls ConstDecls);
    public void visit(ListProgClass ListProgClass);
    public void visit(ListProgVar ListProgVar);
    public void visit(ListProgConst ListProgConst);
    public void visit(NoListProgs NoListProgs);
    public void visit(ListProgs ListProgs);
    public void visit(ProgName ProgName);
    public void visit(Program Program);

}
